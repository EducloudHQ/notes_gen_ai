AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: 'graphql-pdf-chat

  notes ai graphql api

  '
Globals:
  Function:
    Runtime: python3.10
    Architectures:
    - arm64
    Tracing: Active
    Environment:
      Variables:
        USER_TABLE:
          Ref: UserTable
        NOTES_TABLE:
          Ref: UserNotesTable
        DOCS_TABLE:
          Ref: DocumentTable
        LOG_LEVEL: DEBUG
        POWERTOOLS_LOGGER_SAMPLE_RATE: 0.1
        POWERTOOLS_LOGGER_LOG_EVENT: true
        POWERTOOLS_SERVICE_NAME: notes_ai_api_service
        POWERTOOLS_METRICS_NAMESPACE: notes_ai_api
Resources:
  UserLambdaFunction:
    Type: AWS::Serverless::Function
    DependsOn:
    - LambdaLoggingPolicy
    Properties:
      CodeUri: UserLambdaFunction
      Handler: app.lambda_handler
      Description: User Lambda Direct Lambda Resolver
      Tags:
        SOLUTION: LambdaPowertoolsPython
      Layers:
      - Fn::GetAtt:
        - AwsSamAutoDependencyLayerNestedStack
        - Outputs.UserLambdaFunction3b842342DepLayer
    Connectors:
      DynamoDBRWConnector:
        Properties:
          Destination:
            Id: UserTable
          Permissions:
          - Read
          - Write
    Metadata:
      SamResourceId: UserLambdaFunction
  NoteLambdaFunction:
    Type: AWS::Serverless::Function
    DependsOn:
    - LambdaLoggingPolicy
    Properties:
      CodeUri: NoteLambdaFunction
      Handler: app.lambda_handler
      Description: note Lambda Direct Lambda Resolver
      Policies:
      - Statement:
        - Sid: BedrockScopedAccess
          Effect: Allow
          Action: bedrock:InvokeModel
          Resource: arn:aws:bedrock:*::foundation-model/ai21.j2-ultra-v1
      Tags:
        SOLUTION: LambdaPowertoolsPython
      Layers:
      - Fn::GetAtt:
        - AwsSamAutoDependencyLayerNestedStack
        - Outputs.NoteLambdaFunctionbb84f4beDepLayer
    Connectors:
      DynamoDBRWConnector:
        Properties:
          Destination:
            Id: UserNotesTable
          Permissions:
          - Read
          - Write
    Metadata:
      SamResourceId: NoteLambdaFunction
  AppSyncServiceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - appsync.amazonaws.com
          Action:
          - sts:AssumeRole
  InvokeLambdaResolverPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: DirectAppSyncLambda
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Action: lambda:invokeFunction
          Resource:
          - Fn::GetAtt:
            - UserLambdaFunction
            - Arn
          - Fn::GetAtt:
            - NoteLambdaFunction
            - Arn
          - Fn::GetAtt:
            - GenerateEmbeddingsFunction
            - Arn
      Roles:
      - Ref: AppSyncServiceRole
      - Ref: AddLambdaRole
  LambdaLoggingPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: LambdaXRayPolicy
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Action:
          - xray:PutTraceSegments
          - xray:PutTelemetryRecords
          - logs:CreateLogGroup
          - logs:CreateLogStream
          - logs:PutLogEvents
          Resource: '*'
      Roles:
      - Ref: AddLambdaRole
  AddLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Action:
          - sts:AssumeRole
          Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
  RoleAppSyncCloudWatch:
    Type: AWS::IAM::Role
    Properties:
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AWSAppSyncPushToCloudWatchLogs
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Action:
          - sts:AssumeRole
          Principal:
            Service:
            - appsync.amazonaws.com
  DocumentBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName:
        Fn::Sub: ${AWS::StackName}-${AWS::Region}-${AWS::AccountId}
      CorsConfiguration:
        CorsRules:
        - AllowedHeaders:
          - '*'
          AllowedMethods:
          - GET
          - PUT
          - HEAD
          - POST
          - DELETE
          AllowedOrigins:
          - '*'
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
  DocumentBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      PolicyDocument:
        Id: EnforceHttpsPolicy
        Version: '2012-10-17'
        Statement:
        - Sid: EnforceHttpsSid
          Effect: Deny
          Principal: '*'
          Action: s3:*
          Resource:
          - Fn::Sub: arn:aws:s3:::${DocumentBucket}/*
          - Fn::Sub: arn:aws:s3:::${DocumentBucket}
          Condition:
            Bool:
              aws:SecureTransport: 'false'
      Bucket:
        Ref: DocumentBucket
  EmbeddingQueue:
    Type: AWS::SQS::Queue
    DeletionPolicy: Delete
    UpdateReplacePolicy: Delete
    Properties:
      VisibilityTimeout: 180
      MessageRetentionPeriod: 3600
  EmbeddingQueuePolicy:
    Type: AWS::SQS::QueuePolicy
    Properties:
      Queues:
      - Ref: EmbeddingQueue
      PolicyDocument:
        Version: '2012-10-17'
        Id: SecureTransportPolicy
        Statement:
        - Sid: AllowSecureTransportOnly
          Effect: Deny
          Principal: '*'
          Action: SQS:*
          Resource: '*'
          Condition:
            Bool:
              aws:SecureTransport: false
  DocumentTable:
    Type: AWS::DynamoDB::Table
    DeletionPolicy: Delete
    UpdateReplacePolicy: Delete
    Properties:
      KeySchema:
      - AttributeName: userId
        KeyType: HASH
      - AttributeName: documentId
        KeyType: RANGE
      AttributeDefinitions:
      - AttributeName: userId
        AttributeType: S
      - AttributeName: documentId
        AttributeType: S
      BillingMode: PAY_PER_REQUEST
  UserTable:
    Type: AWS::DynamoDB::Table
    DeletionPolicy: Delete
    UpdateReplacePolicy: Delete
    Properties:
      KeySchema:
      - AttributeName: PK
        KeyType: HASH
      - AttributeName: SK
        KeyType: RANGE
      AttributeDefinitions:
      - AttributeName: PK
        AttributeType: S
      - AttributeName: SK
        AttributeType: S
      BillingMode: PAY_PER_REQUEST
  UserNotesTable:
    Type: AWS::DynamoDB::Table
    DeletionPolicy: Delete
    UpdateReplacePolicy: Delete
    Properties:
      KeySchema:
      - AttributeName: PK
        KeyType: HASH
      - AttributeName: SK
        KeyType: RANGE
      AttributeDefinitions:
      - AttributeName: PK
        AttributeType: S
      - AttributeName: SK
        AttributeType: S
      BillingMode: PAY_PER_REQUEST
  CognitoUserPool:
    Type: AWS::Cognito::UserPool
    DeletionPolicy: Delete
    UpdateReplacePolicy: Delete
    Properties:
      AutoVerifiedAttributes:
      - email
      UsernameAttributes:
      - email
      AdminCreateUserConfig:
        AllowAdminCreateUserOnly: true
      Policies:
        PasswordPolicy:
          MinimumLength: 8
          RequireLowercase: true
          RequireNumbers: true
          RequireSymbols: true
          RequireUppercase: true
  CognitoUserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      UserPoolId:
        Ref: CognitoUserPool
      ClientName:
        Ref: CognitoUserPool
      GenerateSecret: false
  UploadTriggerFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: UploadTriggerFunction
      Handler: main.lambda_handler
      Policies:
      - DynamoDBCrudPolicy:
          TableName:
            Ref: DocumentTable
      - S3ReadPolicy:
          BucketName:
            Fn::Sub: ${AWS::StackName}-${AWS::Region}-${AWS::AccountId}*
      - SQSSendMessagePolicy:
          QueueName:
            Fn::GetAtt:
            - EmbeddingQueue
            - QueueName
      Environment:
        Variables:
          DOCS_TABLE:
            Ref: DocumentTable
          QUEUE:
            Fn::GetAtt:
            - EmbeddingQueue
            - QueueName
          BUCKET:
            Fn::Sub: ${AWS::StackName}-${AWS::Region}-${AWS::AccountId}
      Events:
        S3Event:
          Type: S3
          Properties:
            Bucket:
              Ref: DocumentBucket
            Events:
            - s3:ObjectCreated:*
            Filter:
              S3Key:
                Rules:
                - Name: suffix
                  Value: .pdf
      Layers:
      - Fn::GetAtt:
        - AwsSamAutoDependencyLayerNestedStack
        - Outputs.UploadTriggerFunctionbd854304DepLayer
    Metadata:
      SamResourceId: UploadTriggerFunction
  GenerateEmbeddingsFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: GenerateEmbeddingsFunction
      Handler: main.lambda_handler
      Timeout: 180
      MemorySize: 2048
      Policies:
      - SQSPollerPolicy:
          QueueName:
            Fn::GetAtt:
            - EmbeddingQueue
            - QueueName
      - S3CrudPolicy:
          BucketName:
            Ref: DocumentBucket
      - DynamoDBCrudPolicy:
          TableName:
            Ref: DocumentTable
      - Statement:
        - Sid: BedrockScopedAccess
          Effect: Allow
          Action: bedrock:InvokeModel
          Resource: arn:aws:bedrock:*::foundation-model/amazon.titan-embed-text-v1
      Environment:
        Variables:
          DOCS_TABLE:
            Ref: DocumentTable
          BUCKET:
            Ref: DocumentBucket
          MOMENTO_API_KEY: eyJlbmRwb2ludCI6ImNlbGwtNC11cy13ZXN0LTItMS5wcm9kLmEubW9tZW50b2hxLmNvbSIsImFwaV9rZXkiOiJleUpoYkdjaU9pSklVekkxTmlKOS5leUp6ZFdJaU9pSjBjbVY1Y205emFYVnpRR2R0WVdsc0xtTnZiU0lzSW5abGNpSTZNU3dpY0NJNklrTkJRVDBpTENKbGVIQWlPakUzTURFeE5UazJNVFo5LkhkSTNxSWk1QS1hbVFtZi1jSUVFTmxmSVp0M21BYjV4NmlIZml5bUEwOWcifQ==
      Events:
        EmbeddingQueueEvent:
          Type: SQS
          Properties:
            Queue:
              Fn::GetAtt:
              - EmbeddingQueue
              - Arn
            BatchSize: 1
      Layers:
      - Fn::GetAtt:
        - AwsSamAutoDependencyLayerNestedStack
        - Outputs.GenerateEmbeddingsFunction844ca1dbDepLayer
    Metadata:
      SamResourceId: GenerateEmbeddingsFunction
  NotesAIAPI:
    Type: AWS::AppSync::GraphQLApi
    Properties:
      Name: NotesAIAPI
      AuthenticationType: API_KEY
      AdditionalAuthenticationProviders:
      - AuthenticationType: AMAZON_COGNITO_USER_POOLS
        UserPoolConfig:
          AwsRegion:
            Ref: AWS::Region
          UserPoolId:
            Ref: CognitoUserPool
      XrayEnabled: true
      LogConfig:
        CloudWatchLogsRoleArn:
          Fn::GetAtt:
          - RoleAppSyncCloudWatch
          - Arn
        ExcludeVerboseContent: false
        FieldLogLevel: ALL
  NotesAIApiKey:
    Type: AWS::AppSync::ApiKey
    Properties:
      ApiId:
        Fn::GetAtt:
        - NotesAIAPI
        - ApiId
  NotesAIAPISchema:
    Type: AWS::AppSync::GraphQLSchema
    Properties:
      ApiId:
        Fn::GetAtt:
        - NotesAIAPI
        - ApiId
      DefinitionS3Location: ../../schema/schema.graphql
  UserFunctionDataSource:
    Type: AWS::AppSync::DataSource
    Properties:
      ApiId:
        Fn::GetAtt:
        - NotesAIAPI
        - ApiId
      Name: UserLambdaDirectResolver
      Type: AWS_LAMBDA
      ServiceRoleArn:
        Fn::GetAtt:
        - AppSyncServiceRole
        - Arn
      LambdaConfig:
        LambdaFunctionArn:
          Fn::GetAtt:
          - UserLambdaFunction
          - Arn
  NoteFunctionDataSource:
    Type: AWS::AppSync::DataSource
    Properties:
      ApiId:
        Fn::GetAtt:
        - NotesAIAPI
        - ApiId
      Name: NoteLambdaDirectResolver
      Type: AWS_LAMBDA
      ServiceRoleArn:
        Fn::GetAtt:
        - AppSyncServiceRole
        - Arn
      LambdaConfig:
        LambdaFunctionArn:
          Fn::GetAtt:
          - NoteLambdaFunction
          - Arn
  CreateUserAccountResolver:
    Type: AWS::AppSync::Resolver
    Properties:
      ApiId:
        Fn::GetAtt:
        - NotesAIAPI
        - ApiId
      TypeName: Mutation
      FieldName: createUserAccount
      DataSourceName:
        Fn::GetAtt:
        - UserFunctionDataSource
        - Name
  CreateNoteResolver:
    Type: AWS::AppSync::Resolver
    Properties:
      ApiId:
        Fn::GetAtt:
        - NotesAIAPI
        - ApiId
      TypeName: Mutation
      FieldName: createNote
      DataSourceName:
        Fn::GetAtt:
        - NoteFunctionDataSource
        - Name
  enhanceNoteResolver:
    Type: AWS::AppSync::Resolver
    Properties:
      ApiId:
        Fn::GetAtt:
        - NotesAIAPI
        - ApiId
      TypeName: Query
      FieldName: enhanceNote
      DataSourceName:
        Fn::GetAtt:
        - NoteFunctionDataSource
        - Name
  AwsSamAutoDependencyLayerNestedStack:
    DeletionPolicy: Delete
    Metadata:
      CreatedBy: AWS SAM CLI sync command
    Properties:
      TemplateURL: /Users/rosius/Documents/graphql-pdf-chat/.aws-sam/auto-dependency-layer/adl_nested_template.yaml
    Type: AWS::CloudFormation::Stack
