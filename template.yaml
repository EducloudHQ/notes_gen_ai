AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  graphql-pdf-chat

  notes ai graphql api

# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    Runtime: python3.10
    Architectures:
      - arm64
    Tracing: Active
    Environment:
      Variables:
        USER_TABLE: !Ref UserTable
        NOTES_TABLE: !Ref UserNotesTable
        DOCS_TABLE: !Ref DocumentTable
        BUCKET: !Sub "${AWS::StackName}-${AWS::Region}-${AWS::AccountId}"
        LOG_LEVEL: DEBUG
        POWERTOOLS_LOGGER_SAMPLE_RATE: 0.1
        POWERTOOLS_LOGGER_LOG_EVENT: true
        POWERTOOLS_SERVICE_NAME: "notes_ai_api_service"
        POWERTOOLS_METRICS_NAMESPACE: "notes_ai_api"

Resources:

  NoteLambdaFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    DependsOn:
      - LambdaLoggingPolicy
    Properties:
      CodeUri: src/
      Handler: app.lambda_handler
      Description: note Lambda Direct Lambda Resolver
      Timeout: 180
      MemorySize: 2048
      Policies:
          - S3CrudPolicy:
              BucketName: !Ref DocumentBucket
          - Statement:
              - Sid: "BedrockScopedAccess"
                Effect: "Allow"
                Action: "bedrock:InvokeModel"
                Resource:
                - "arn:aws:bedrock:*::foundation-model/ai21.j2-ultra-v1"
                - "arn:aws:bedrock:*::foundation-model/anthropic.claude-v2"
                - "arn:aws:bedrock:*::foundation-model/amazon.titan-embed-text-v1"

      Tags:
        SOLUTION: LambdaPowertoolsPython
    Connectors:
      DynamoDBUSERRWConnector:
        Properties:
          Destination:
            Id: UserTable
          Permissions:
            - Read
            - Write
      DynamoDBRWConnector:
        Properties:
          Destination:
            Id: UserNotesTable
          Permissions:
            - Read
            - Write
  AppSyncServiceRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "appsync.amazonaws.com"
            Action:
              - "sts:AssumeRole"

  LambdaLoggingPolicy:
    Type: "AWS::IAM::Policy"
    Properties:
      PolicyName: LambdaXRayPolicy
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Action: [
              "xray:PutTraceSegments",
              "xray:PutTelemetryRecords",
              "logs:CreateLogGroup",
              "logs:CreateLogStream",
              "logs:PutLogEvents"
            ]
            Resource: "*"
      Roles:
        - !Ref AddLambdaRole


  AddLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Action:
              - "sts:AssumeRole"
            Effect: "Allow"
            Principal:
              Service:
                - "lambda.amazonaws.com"

  RoleAppSyncCloudWatch:
    Type: AWS::IAM::Role
    Properties:
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AWSAppSyncPushToCloudWatchLogs"
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - sts:AssumeRole
            Principal:
              Service:
                - appsync.amazonaws.com

  DocumentBucket:
    Type: "AWS::S3::Bucket"
    Properties:
      BucketName: !Sub "${AWS::StackName}-${AWS::Region}-${AWS::AccountId}"
      CorsConfiguration:
        CorsRules:
          - AllowedHeaders:
              - "*"
            AllowedMethods:
              - GET
              - PUT
              - HEAD
              - POST
              - DELETE
            AllowedOrigins:
              - "*"
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true

  DocumentBucketPolicy:
    Type: "AWS::S3::BucketPolicy"
    Properties:
      PolicyDocument:
        Id: EnforceHttpsPolicy
        Version: "2012-10-17"
        Statement:
          - Sid: EnforceHttpsSid
            Effect: Deny
            Principal: "*"
            Action: "s3:*"
            Resource:
              - !Sub "arn:aws:s3:::${DocumentBucket}/*"
              - !Sub "arn:aws:s3:::${DocumentBucket}"
            Condition:
              Bool:
                "aws:SecureTransport": "false"
      Bucket: !Ref DocumentBucket

  EmbeddingQueue:
    Type: AWS::SQS::Queue
    DeletionPolicy: Delete
    UpdateReplacePolicy: Delete
    Properties:
      VisibilityTimeout: 180
      MessageRetentionPeriod: 3600

  EmbeddingQueuePolicy:
    Type: AWS::SQS::QueuePolicy
    Properties:
      Queues:
        - !Ref EmbeddingQueue
      PolicyDocument:
        Version: "2012-10-17"
        Id: SecureTransportPolicy
        Statement:
          - Sid: AllowSecureTransportOnly
            Effect: Deny
            Principal: "*"
            Action: "SQS:*"
            Resource: "*"
            Condition:
              Bool:
                aws:SecureTransport: false

  InvokeLambdaResolverPolicy:
    Type: "AWS::IAM::Policy"
    Properties:
      PolicyName: "DirectAppSyncLambda"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Action: "lambda:invokeFunction"
            Resource:
              - !GetAtt NoteLambdaFunction.Arn

      Roles:
        - !Ref AppSyncServiceRole
        - !Ref AddLambdaRole
  DocumentTable:
    Type: AWS::DynamoDB::Table
    DeletionPolicy: Delete
    UpdateReplacePolicy: Delete
    Properties:
      KeySchema:
        - AttributeName: userId
          KeyType: HASH
        - AttributeName: documentId
          KeyType: RANGE
      AttributeDefinitions:
        - AttributeName: userId
          AttributeType: S
        - AttributeName: documentId
          AttributeType: S
      BillingMode: PAY_PER_REQUEST

  UserTable:
    Type: AWS::DynamoDB::Table
    DeletionPolicy: Delete
    UpdateReplacePolicy: Delete
    Properties:
      KeySchema:
        - AttributeName: PK
          KeyType: HASH
        - AttributeName: SK
          KeyType: RANGE
      AttributeDefinitions:
        - AttributeName: PK
          AttributeType: S
        - AttributeName: SK
          AttributeType: S
      BillingMode: PAY_PER_REQUEST

  UserNotesTable:
    Type: AWS::DynamoDB::Table
    DeletionPolicy: Delete
    UpdateReplacePolicy: Delete
    Properties:
      KeySchema:
        - AttributeName: PK
          KeyType: HASH
        - AttributeName: SK
          KeyType: RANGE
      AttributeDefinitions:
        - AttributeName: PK
          AttributeType: S
        - AttributeName: SK
          AttributeType: S
      BillingMode: PAY_PER_REQUEST

  CognitoUserPool:
    Type: AWS::Cognito::UserPool
    DeletionPolicy: Delete
    UpdateReplacePolicy: Delete
    Properties:
      AutoVerifiedAttributes:
        - email
      UsernameAttributes:
        - email
      AdminCreateUserConfig:
        AllowAdminCreateUserOnly: true
      Policies:
        PasswordPolicy:
          MinimumLength: 8
          RequireLowercase: true
          RequireNumbers: true
          RequireSymbols: true
          RequireUppercase: true

  CognitoUserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      UserPoolId: !Ref CognitoUserPool
      ClientName: !Ref CognitoUserPool
      GenerateSecret: false
  UploadTriggerFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/upload_trigger/
      Handler: main.lambda_handler
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref DocumentTable
        - S3ReadPolicy:
            BucketName: !Sub "${AWS::StackName}-${AWS::Region}-${AWS::AccountId}*"
        - SQSSendMessagePolicy:
            QueueName: !GetAtt EmbeddingQueue.QueueName
      Environment:
        Variables:
          DOCS_TABLE: !Ref DocumentTable
          QUEUE: !GetAtt EmbeddingQueue.QueueName
          BUCKET: !Sub "${AWS::StackName}-${AWS::Region}-${AWS::AccountId}"
      Events:
        S3Event:
          Type: S3
          Properties:
            Bucket: !Ref DocumentBucket
            Events:
              - s3:ObjectCreated:*
            Filter:
              S3Key:
                Rules:
                  - Name: suffix
                    Value: .pdf
  GenerateEmbeddingsFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/generate_embeddings/
      Handler: main.lambda_handler
      Timeout: 180
      MemorySize: 2048
      Policies:
        - SQSPollerPolicy:
            QueueName: !GetAtt EmbeddingQueue.QueueName
        - S3CrudPolicy:
            BucketName: !Ref DocumentBucket
        - DynamoDBCrudPolicy:
            TableName: !Ref DocumentTable
        - Statement:
            - Sid: "BedrockScopedAccess"
              Effect: "Allow"
              Action: "bedrock:InvokeModel"
              Resource:
                - "arn:aws:bedrock:*::foundation-model/ai21.j2-ultra-v1"             # Powertools env vars: https://awslabs.github.io/aws-lambda-powertools-python/#environment-variables
                - "arn:aws:bedrock:*::foundation-model/anthropic.claude-v2"
                - "arn:aws:bedrock:*::foundation-model/amazon.titan-embed-text-v1"


      Environment:
        Variables:
          DOCS_TABLE: !Ref DocumentTable
          BUCKET: !Ref DocumentBucket

      Events:
        EmbeddingQueueEvent:
          Type: SQS
          Properties:
            Queue: !GetAtt EmbeddingQueue.Arn
            BatchSize: 1


  NotesAIAPI:
    Type: "AWS::AppSync::GraphQLApi"
    Properties:
        Name: NotesAIAPI
        AuthenticationType: "API_KEY"
        AdditionalAuthenticationProviders:
            - AuthenticationType: AMAZON_COGNITO_USER_POOLS
              UserPoolConfig:
                  AwsRegion: !Ref AWS::Region
                  UserPoolId: !Ref CognitoUserPool
        XrayEnabled: true
        LogConfig:
            CloudWatchLogsRoleArn: !GetAtt RoleAppSyncCloudWatch.Arn
            ExcludeVerboseContent: FALSE
            FieldLogLevel: ALL
  NotesAIApiKey:
      Type: AWS::AppSync::ApiKey
      Properties:
          ApiId: !GetAtt NotesAIAPI.ApiId

  NotesAIAPISchema:
      Type: "AWS::AppSync::GraphQLSchema"
      Properties:
          ApiId: !GetAtt NotesAIAPI.ApiId
          DefinitionS3Location: 'schema/schema.graphql'

  NoteFunctionDataSource:
    Type: "AWS::AppSync::DataSource"
    Properties:
      ApiId: !GetAtt NotesAIAPI.ApiId
      Name: "NoteLambdaDirectResolver"
      Type: "AWS_LAMBDA"
      ServiceRoleArn: !GetAtt AppSyncServiceRole.Arn
      LambdaConfig:
        LambdaFunctionArn: !GetAtt NoteLambdaFunction.Arn

  CreateUserAccountResolver:
    Type: "AWS::AppSync::Resolver"
    Properties:
      ApiId: !GetAtt NotesAIAPI.ApiId
      TypeName: "Mutation"
      FieldName: "createUserAccount"
      DataSourceName: !GetAtt NoteFunctionDataSource.Name

  queryDocumentResolver:
    Type: "AWS::AppSync::Resolver"
    Properties:
      ApiId: !GetAtt NotesAIAPI.ApiId
      TypeName: "Query"
      FieldName: "queryDocument"
      DataSourceName: !GetAtt NoteFunctionDataSource.Name


  CreateNoteResolver:
    Type: "AWS::AppSync::Resolver"
    Properties:
      ApiId: !GetAtt NotesAIAPI.ApiId
      TypeName: "Mutation"
      FieldName: "createNote"
      DataSourceName: !GetAtt NoteFunctionDataSource.Name
  UpdateNoteResolver:
    Type: "AWS::AppSync::Resolver"
    Properties:
      ApiId: !GetAtt NotesAIAPI.ApiId
      TypeName: "Mutation"
      FieldName: "updateNote"
      DataSourceName: !GetAtt NoteFunctionDataSource.Name
  getNoteResolver:
    Type: "AWS::AppSync::Resolver"
    Properties:
      ApiId: !GetAtt NotesAIAPI.ApiId
      TypeName: "Query"
      FieldName: "getNote"
      DataSourceName: !GetAtt NoteFunctionDataSource.Name
  getNotesResolver:
    Type: "AWS::AppSync::Resolver"
    Properties:
      ApiId: !GetAtt NotesAIAPI.ApiId
      TypeName: "Query"
      FieldName: "getAllNotes"
      DataSourceName: !GetAtt NoteFunctionDataSource.Name
  enhanceNoteResolver:
    Type: "AWS::AppSync::Resolver"
    Properties:
      ApiId: !GetAtt NotesAIAPI.ApiId
      TypeName: "Query"
      FieldName: "enhanceNote"
      DataSourceName: !GetAtt NoteFunctionDataSource.Name


  ###################
  # OUTPUTS
  ##################
Outputs:

  NotesAIAPI:
    Value: !Ref NotesAIAPI